import javax.inject.Inject
import java.util.regex.Pattern

//
// build.gradle in TeamCode
//
// Most of the definitions for building your module reside in a common, shared
// file 'build.common.gradle'. Being factored in this way makes it easier to
// integrate updates to the FTC into your code. If you really need to customize
// the build definitions, you can place those customizations in this file, but
// please think carefully as to whether such customizations are really necessary
// before doing so.


// Custom definitions may go here

// Include common definitions from above.
apply from: '../build.common.gradle'
apply from: '../build.dependencies.gradle'

android {
    namespace = 'org.firstinspires.ftc.teamcode'
    androidResources {
        noCompress 'tflite'
    }

    packagingOptions {
        jniLibs {
            pickFirsts += ['**/*.so']
        }
        jniLibs.useLegacyPackaging true
    }
}

ext {
    isPushPaths = false
}

dependencies {
    implementation project(':FtcRobotController')
    implementation project(':multitask')
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

def ADBexe = android.getAdbExecutable()

interface IsDeviceConnectedParams extends ValueSourceParameters {
    Property<File> getADBExe();
}
abstract class IsDeviceConnectedSource implements ValueSource<Boolean, IsDeviceConnectedParams> {
    @Inject
    abstract ExecOperations getExecOperations()

    @Override
    Boolean obtain() {
        final File ADB_EXE = parameters.ADBExe.get()
        new ByteArrayOutputStream().withStream { baos ->
            getExecOperations().exec {
                it.commandLine(ADB_EXE.toPath().toString(), "devices")
                it.workingDir(".")
                it.standardOutput = baos
                it.setIgnoreExitValue(true)
            }
            def result = baos.toString()
            def trimmed = Pattern.compile("^.*?\\n").matcher(result).replaceAll("")
            return trimmed.contains("device")
        }
    }
}


def pushPaths = tasks.register("pushPaths", Exec) {
    def deviceStatusProvider = providers.of(IsDeviceConnectedSource) {
        parameters {
            it.ADBExe.set(android.getAdbExecutable())
        }
    }
    def buildDirPath = layout.buildDirectory.asFile.get().toPath()
    def pathOutputPath = buildDirPath.resolve("outputs").resolve("paths")

    enabled = deviceStatusProvider.get()

    doFirst {
        if (!pathOutputPath.toFile().exists()){
            println("No sources, skipping")
            throw new StopExecutionException()
        }
        if (!deviceStatusProvider.get()) {
            println("Not connected when the build started, skipping")
            throw new StopExecutionException()
        }
    }
    doLast {
        println("Uploaded path binaries to the robot.")
    }

    dependsOn(":TeamCode:testDebugUnitTest")
    workingDir pathOutputPath.toString()
    ignoreExitValue true
    commandLine(android.getAdbExecutable().toPath().toString(), "push", pathOutputPath.toString(), "/sdcard/")
}

afterEvaluate {
    tasks.named("assembleDebug").configure {
        finalizedBy(":TeamCode:pushPaths")
    }
}
